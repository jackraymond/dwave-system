version: 2.1

jobs:
  test-linux: &test-linux-template
    parameters:
      dimod-version:
        type: string
      python-version:
        type: string
      integration-test-python-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-test-cache-template
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip
            pip install -r requirements.txt -r tests/requirements.txt
            pip install 'dimod<< parameters.dimod-version >>'

      - save_cache: &save-test-cache-template
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            if [[ << parameters.integration-test-python-version >> != << parameters.python-version >> ]]; then
              export SKIP_INT_TESTS=1
            fi
            coverage run -m unittest discover

      - run: &codecov-template
          name: codecov
          command: |
            . env/bin/activate
            codecov

  test-doctest:
    docker:
      - image: circleci/python:3.7-stretch # as of march 2019 RTD uses 3.7

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt -r docs/requirements.txt

      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ html doctest

      - run: 
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-osx:
    parameters:
      python-version:
        type: string
      integration-test-python-version:
        type: string

    macos:
      xcode: "13.2.0"

    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-13.2.0

      - when:
          # backport https://github.com/python/cpython/pull/21113 to support macOS 11 when building py36
          # see also: https://github.com/pyenv/pyenv/issues/1737.
          condition:
            matches:
              pattern: "^3\\.6.*$"
              value: << parameters.python-version >>
          steps:
            - run:
                name: Install Python 3.6 with a patch for macOS 11
                command: |
                  curl -LO https://github.com/python/cpython/commit/8ea6353.patch
                  pyenv install << parameters.python-version>> -s -p < 8ea6353.patch

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-13.2.0

      - restore_cache: *restore-test-cache-template

      - run:
          name: create virtual env and install dependencies
          command: |
            eval "$(pyenv init --path 2>/dev/null || true)"
            eval "$(pyenv init -)"
            pyenv shell << parameters.python-version >>
            python -m venv env
            . env/bin/activate
            pip install -U pip
            pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: *save-test-cache-template
      - run: *run-tests-template
      - run: *codecov-template

  deploy:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m virtualenv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install twine wheel

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            [[ "$(pip show dwave-system 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >>-dimod<< matrix.dimod-version >>
          matrix:
            parameters:
              python-version: &python-versions ["3.6.8", "3.7.9", "3.8.9", "3.9.4", &latest-python "3.10.0"]
              integration-test-python-version: &integration-python-versions [*latest-python]
              dimod-version: ["==0.10.0", "~=0.10.0"]
            exclude:
              # py310 is supported in dimod>=0.10.8
              - python-version: "3.10.0"
                integration-test-python-version: *latest-python
                dimod-version: "==0.10.0"
      - test-osx:
          name: test-osx-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              integration-test-python-version: *integration-python-versions
      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
